# This file was automatically generated by gh-aw. DO NOT EDIT.
# To update this file, edit the corresponding .md file and run:
#   gh aw compile

name: "Weekly Checks (Daily)"
on:
  schedule:
  - cron: 0 17 * * *
  workflow_dispatch: {}

permissions: {}

concurrency:
  group: "gh-aw-${{ github.workflow }}"

run-name: "Weekly Checks (Daily)"

jobs:
  weekly-checks-daily:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
      - name: Install Codex
        run: npm install -g @openai/codex
      - name: Setup MCPs
        run: |
          mkdir -p /tmp/mcp-config
          cat > /tmp/mcp-config/config.toml << EOF
          [history]
          persistence = "none"
          
          [mcp_servers.github]
          command = "docker"
          args = [
            "run",
            "-i",
            "--rm",
            "-e",
            "GITHUB_PERSONAL_ACCESS_TOKEN",
            "ghcr.io/github/github-mcp-server:sha-45e90ae"
          ]
          env = { "GITHUB_PERSONAL_ACCESS_TOKEN" = "${{ secrets.GITHUB_TOKEN }}" }
          EOF
      - name: Create prompt
        run: |
          mkdir -p /tmp/aw-prompts
          cat > /tmp/aw-prompts/prompt.txt << 'EOF'
          # Weekly Checks (Daily)
          
          You are a repository maintenance engineer for ${{ github.repository }}. Your job is to run daily "weekly" checks and propose changes via pull requests. Work conservatively, and prefer opening PRs over pushing directly to main. Follow the steps carefully.
          
          Steps:
          1. Repository scan:
             - Identify obvious repo hygiene gaps (missing or outdated CODEOWNERS, LICENSE, README, CONTRIBUTING, .editorconfig, issue templates).
             - If gaps are found, prepare minimal, conventional files and propose them in a PR under branch `chore/daily-checks/<date>`.
          2. Workflow hardening:
             - Inspect files under `.github/workflows` for:
               - Missing `permissions` blocks
               - Missing or overly broad `concurrency` groups
               - Missing `timeout-minutes`
             - Propose small, safe improvements aligned with GitHub Actions best practices, with rationale in the PR body.
          3. Documentation drift:
             - If code in `src/`, `scripts/` or workflow files changed in the last 7 days, review `docs/` and `README.md` for drift.
             - If updates are needed, edit docs conservatively to reflect current behavior and open a PR.
          4. TODO/NOTE sweep:
             - Search for `TODO`/`FIXME`/`NOTE` in the repository.
             - Aggregate a short checklist in `docs/daily-checks-report.md`, updating or creating the file. Do not remove developer TODOs; just list them with file and line context.
          5. Dependency hints (non-destructive):
             - If a package manifest (`package.json`, `bun.lockb`, `pnpm-lock.yaml`, `poetry.lock`, `go.mod`, `Cargo.toml`) is present, create an issue titled "Dependency updates suggested" with a summary and references to official update instructions. Do not modify lockfiles directly.
          6. Open a single PR (preferred):
             - If multiple small fixes are needed, batch them into one PR titled `chore(checks): daily repo maintenance`.
             - Use clear commits and a PR body summarizing all changes and linking to any created issues.
          7. Exit criteria:
             - If no changes are necessary, add or update `docs/daily-checks-report.md` with a short "No action required" entry for today and commit via a trivial PR.
          
          Constraints:
          - Never commit directly to `main`. Always create a branch and a PR.
          - Keep changes minimal and reversible; favor comments and issues if unsure.
          - Do not run commands or scripts; only edit repository files and open PRs.
          
          EOF
      - name: Print prompt to step summary
        run: |
          echo "## Generated Prompt" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '``````markdown' >> $GITHUB_STEP_SUMMARY
          cat /tmp/aw-prompts/prompt.txt >> $GITHUB_STEP_SUMMARY
          echo '``````' >> $GITHUB_STEP_SUMMARY
      - name: Generate agentic run info
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            const awInfo = {
              engine_id: "codex",
              engine_name: "Codex",
              model: "",
              version: "",
              workflow_name: "Weekly Checks (Daily)",
              experimental: true,
              supports_tools_whitelist: true,
              supports_http_transport: false,
              run_id: context.runId,
              run_number: context.runNumber,
              run_attempt: process.env.GITHUB_RUN_ATTEMPT,
              repository: context.repo.owner + '/' + context.repo.repo,
              ref: context.ref,
              sha: context.sha,
              actor: context.actor,
              event_name: context.eventName,
              created_at: new Date().toISOString()
            };
            
            // Write to /tmp directory to avoid inclusion in PR
            const tmpPath = '/tmp/aw_info.json';
            fs.writeFileSync(tmpPath, JSON.stringify(awInfo, null, 2));
            console.log('Generated aw_info.json at:', tmpPath);
            console.log(JSON.stringify(awInfo, null, 2));
      - name: Upload agentic run info
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: aw_info.json
          path: /tmp/aw_info.json
          if-no-files-found: warn
      - name: Run Codex
        run: |
          INSTRUCTION=$(cat /tmp/aw-prompts/prompt.txt)
          export CODEX_HOME=/tmp/mcp-config
          
          # Create log directory outside git repo
          mkdir -p /tmp/aw-logs
          
          # Run codex with log capture
          codex exec \
            -c model=o4-mini \
            --full-auto "$INSTRUCTION" 2>&1 | tee /tmp/weekly-checks-(daily).log
        env:
          GITHUB_STEP_SUMMARY: ${{ env.GITHUB_STEP_SUMMARY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      - name: Check if workflow-complete.txt exists, if so upload it
        id: check_file
        run: |
          if [ -f workflow-complete.txt ]; then
            echo "File exists"
            echo "upload=true" >> $GITHUB_OUTPUT
          else
            echo "File does not exist"
            echo "upload=false" >> $GITHUB_OUTPUT
          fi
      - name: Upload workflow-complete.txt
        if: steps.check_file.outputs.upload == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: workflow-complete
          path: workflow-complete.txt
      - name: Upload agent logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: weekly-checks-(daily).log
          path: /tmp/weekly-checks-(daily).log
          if-no-files-found: warn

